class MSSoapClient {
    private def error(msg: String) = {
        println("SoapClient error: " + msg)
    }

    def wrap(xml: Elem, host: String) : String = {
        val buf = new StringBuilder
        buf.append("<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n")
        buf.append("<SOAP-ENV:Envelope xmlns:SOAP-ENV=\"http://schemas.xmlsoap.org/soap/envelope/\">\n")
        buf.append("<s:Header xmlns:s=\"http://schemas.xmlsoap.org/soap/envelope/\">")
        buf.append("<To s:mustUnderstand=\"1\" xmlns=\"http://schemas.microsoft.com/ws/2005/05/addressing/none\">" + host + "</To>")
        buf.append("<Action s:mustUnderstand=\"1\" xmlns=\"http://schemas.microsoft.com/ws/2005/05/addressing/none\"/>")
        buf.append("</s:Header>")
        buf.append("<SOAP-ENV:Body>\n")
        buf.append(xml.toString)
        buf.append("\n</SOAP-ENV:Body>\n")
        buf.append("</SOAP-ENV:Envelope>\n")
        buf.toString
    }

    def sendMessage(host: String, req: Elem) : Option[Elem] = {
        val url = new java.net.URL(host)
        val outs = wrap(req, host).getBytes
        val conn = url.openConnection.asInstanceOf[java.net.HttpURLConnection]
        try {
            conn.setRequestMethod("POST")
            conn.setDoOutput(true)
            conn.setRequestProperty("Content-Length", outs.length.toString)
            conn.setRequestProperty("Content-Type", "text/xml")
            conn.getOutputStream.write(outs)
            conn.getOutputStream.close
            Some(XML.load(conn.getInputStream))
        }
        catch {
            case e: Exception => error("post: " + e)
                error("post:" + scala.io.Source.fromInputStream(conn.getErrorStream).mkString)
                None
        }
    }
}

